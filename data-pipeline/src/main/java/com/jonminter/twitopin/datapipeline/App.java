/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.jonminter.twitopin.datapipeline;

import com.jonminter.twitopin.datapipeline.models.Tweet;
import com.jonminter.twitopin.datapipeline.models.TweetUser;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.connectors.twitter.TwitterSource;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws Exception {
        final ParameterTool params = ParameterTool.fromArgs(args);
        System.out.println("Usage: App [--output <path>] " +
                "[--twitter-source.consumerKey <key> --twitter-source.consumerSecret <secret> --twitter-source.token <token> --twitter-source.tokenSecret <tokenSecret>]");

        StreamExecutionEnvironment sse = StreamExecutionEnvironment.getExecutionEnvironment();

        sse.getConfig().setGlobalJobParameters(params);
        sse.setParallelism(params.getInt("parallelism", 1));

        System.out.println(params.getProperties());

        DataStream<String> tweetStream = sse.addSource(new TwitterSource(params.getProperties()));

        DataStream<Tweet> tweetObjectStream = tweetStream.map(new RawTweetMapper());

        DataStream<Tuple2<String, Integer>> tweetWordCountStream = tweetStream
                .map(new RawTweetMapper())
                .flatMap(new Tweet2WordFlatMapper())
                .keyBy(0)
                .sum(1);

        tweetWordCountStream.print();

        sse.execute("Twitter Word Count");


    }
}
